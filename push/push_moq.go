// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package push

import (
	"context"
	"github.com/shoet/trends-collector/entities"
	"sync"
)

// Ensure, that PagesFetcherMock does implement PagesFetcher.
// If this is not the case, regenerate this file with moq.
var _ PagesFetcher = &PagesFetcherMock{}

// PagesFetcherMock is a mock implementation of PagesFetcher.
//
//	func TestSomethingThatUsesPagesFetcher(t *testing.T) {
//
//		// make and configure a mocked PagesFetcher
//		mockedPagesFetcher := &PagesFetcherMock{
//			QueryPageByPartitionKeyFunc: func(ctx context.Context, partitionKey string) ([]*entities.Page, error) {
//				panic("mock out the QueryPageByPartitionKey method")
//			},
//			ScanPageByPartitionKeyPrefixFunc: func(ctx context.Context, prefix string) ([]string, error) {
//				panic("mock out the ScanPageByPartitionKeyPrefix method")
//			},
//		}
//
//		// use mockedPagesFetcher in code that requires PagesFetcher
//		// and then make assertions.
//
//	}
type PagesFetcherMock struct {
	// QueryPageByPartitionKeyFunc mocks the QueryPageByPartitionKey method.
	QueryPageByPartitionKeyFunc func(ctx context.Context, partitionKey string) ([]*entities.Page, error)

	// ScanPageByPartitionKeyPrefixFunc mocks the ScanPageByPartitionKeyPrefix method.
	ScanPageByPartitionKeyPrefixFunc func(ctx context.Context, prefix string) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// QueryPageByPartitionKey holds details about calls to the QueryPageByPartitionKey method.
		QueryPageByPartitionKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PartitionKey is the partitionKey argument value.
			PartitionKey string
		}
		// ScanPageByPartitionKeyPrefix holds details about calls to the ScanPageByPartitionKeyPrefix method.
		ScanPageByPartitionKeyPrefix []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prefix is the prefix argument value.
			Prefix string
		}
	}
	lockQueryPageByPartitionKey      sync.RWMutex
	lockScanPageByPartitionKeyPrefix sync.RWMutex
}

// QueryPageByPartitionKey calls QueryPageByPartitionKeyFunc.
func (mock *PagesFetcherMock) QueryPageByPartitionKey(ctx context.Context, partitionKey string) ([]*entities.Page, error) {
	if mock.QueryPageByPartitionKeyFunc == nil {
		panic("PagesFetcherMock.QueryPageByPartitionKeyFunc: method is nil but PagesFetcher.QueryPageByPartitionKey was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PartitionKey string
	}{
		Ctx:          ctx,
		PartitionKey: partitionKey,
	}
	mock.lockQueryPageByPartitionKey.Lock()
	mock.calls.QueryPageByPartitionKey = append(mock.calls.QueryPageByPartitionKey, callInfo)
	mock.lockQueryPageByPartitionKey.Unlock()
	return mock.QueryPageByPartitionKeyFunc(ctx, partitionKey)
}

// QueryPageByPartitionKeyCalls gets all the calls that were made to QueryPageByPartitionKey.
// Check the length with:
//
//	len(mockedPagesFetcher.QueryPageByPartitionKeyCalls())
func (mock *PagesFetcherMock) QueryPageByPartitionKeyCalls() []struct {
	Ctx          context.Context
	PartitionKey string
} {
	var calls []struct {
		Ctx          context.Context
		PartitionKey string
	}
	mock.lockQueryPageByPartitionKey.RLock()
	calls = mock.calls.QueryPageByPartitionKey
	mock.lockQueryPageByPartitionKey.RUnlock()
	return calls
}

// ScanPageByPartitionKeyPrefix calls ScanPageByPartitionKeyPrefixFunc.
func (mock *PagesFetcherMock) ScanPageByPartitionKeyPrefix(ctx context.Context, prefix string) ([]string, error) {
	if mock.ScanPageByPartitionKeyPrefixFunc == nil {
		panic("PagesFetcherMock.ScanPageByPartitionKeyPrefixFunc: method is nil but PagesFetcher.ScanPageByPartitionKeyPrefix was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Prefix string
	}{
		Ctx:    ctx,
		Prefix: prefix,
	}
	mock.lockScanPageByPartitionKeyPrefix.Lock()
	mock.calls.ScanPageByPartitionKeyPrefix = append(mock.calls.ScanPageByPartitionKeyPrefix, callInfo)
	mock.lockScanPageByPartitionKeyPrefix.Unlock()
	return mock.ScanPageByPartitionKeyPrefixFunc(ctx, prefix)
}

// ScanPageByPartitionKeyPrefixCalls gets all the calls that were made to ScanPageByPartitionKeyPrefix.
// Check the length with:
//
//	len(mockedPagesFetcher.ScanPageByPartitionKeyPrefixCalls())
func (mock *PagesFetcherMock) ScanPageByPartitionKeyPrefixCalls() []struct {
	Ctx    context.Context
	Prefix string
} {
	var calls []struct {
		Ctx    context.Context
		Prefix string
	}
	mock.lockScanPageByPartitionKeyPrefix.RLock()
	calls = mock.calls.ScanPageByPartitionKeyPrefix
	mock.lockScanPageByPartitionKeyPrefix.RUnlock()
	return calls
}

// Ensure, that PusherMock does implement Pusher.
// If this is not the case, regenerate this file with moq.
var _ Pusher = &PusherMock{}

// PusherMock is a mock implementation of Pusher.
//
//	func TestSomethingThatUsesPusher(t *testing.T) {
//
//		// make and configure a mocked Pusher
//		mockedPusher := &PusherMock{
//			SendMessageFunc: func(message string) error {
//				panic("mock out the SendMessage method")
//			},
//		}
//
//		// use mockedPusher in code that requires Pusher
//		// and then make assertions.
//
//	}
type PusherMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(message string) error

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Message is the message argument value.
			Message string
		}
	}
	lockSendMessage sync.RWMutex
}

// SendMessage calls SendMessageFunc.
func (mock *PusherMock) SendMessage(message string) error {
	if mock.SendMessageFunc == nil {
		panic("PusherMock.SendMessageFunc: method is nil but Pusher.SendMessage was just called")
	}
	callInfo := struct {
		Message string
	}{
		Message: message,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(message)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//
//	len(mockedPusher.SendMessageCalls())
func (mock *PusherMock) SendMessageCalls() []struct {
	Message string
} {
	var calls []struct {
		Message string
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
