service: trends-collector
frameworkVersion: "3"

plugins:
  - ./serverless_plugins/packing_go.js
  # - serverless-step-functions

custom:
  go:
    ignoreFunctions:
      - summary-push

provider:
  name: aws
  runtime: provided.al2
  stage: dev
  region: ap-northeast-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:BatchWriteItem
      Resource: "*"

  ecr:
    images:
      crawlerContainerImage:
        path: .
        platform: linux/amd64
        file: ./crawler/Dockerfile

package:
  patterns:
    - "!./**"
    - ./functions/**

functions:
  health:
    handler: functions/health/main.go
    events:
      - http:
          path: /health
          method: get
          cors: true
          # private: true

  topic:
    handler: functions/topic/main.go
    events:
      - http:
          path: /topic
          method: get
          cors: true
          # private: true
      - http:
          path: /topic/{id}
          method: get
          cors: true
          # private: true
      - http:
          path: /topic
          method: post
          cors: true
          # private: true
      - http:
          path: /topic
          method: delete
          cors: true
          # private: true
      - http:
          path: /topic
          method: put
          cors: true
          # private: true

  summary-push:
    handler: functions/summary-push/main.go
    environment:
      SLACK_BOT_TOKEN: ${ssm:/trends-collector/push/SLACK_BOT_TOKEN}
      SLACK_CHANNEL: ${ssm:/trends-collector/push/SLACK_CHANNEL}
      WEB_PAGE_SUMMARY_API_URL: ${ssm:/web-page-summarizer/task/API_URL}
      WEB_PAGE_SUMMARY_API_KEY: ${ssm:/web-page-summarizer/task/API_KEY}
    timeout: 240

  crawler:
    image:
      name: crawlerContainerImage
    timeout: 300
    memorySize: 2048
    ephemeralStorageSize: 1024
    events:
      - eventBridge:
          schedule: "cron(0 * * * ? *)"

# stepFunctions:
#   stateMachines:
#     StateMachine1:
#       name: DailyTrendsStateMachine
#       definition:
#         StartAt: SummaryPush
#         States:
#           # PushDaily:
#           #   Type: Task
#           #   Resource:
#           #     Fn::GetAtt: [PushLambdaFunction, Arn]
#           #   Parameters:
#           #     category: DailyTrends
#           #   Next: SummaryPush
#           SummaryPush:
#             Type: Task
#             Resource:
#               Fn::GetAtt: [SummaryDashpushLambdaFunction, Arn]
#             End: true

resources:
  Resources:
    topicsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: topics
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    pagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pages
        AttributeDefinitions:
          - AttributeName: partition_key
            AttributeType: S
          - AttributeName: trend_rank
            AttributeType: N
        KeySchema:
          - AttributeName: partition_key
            KeyType: HASH
          - AttributeName: trend_rank
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    summaryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: summaries
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    sequenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sequence
        AttributeDefinitions:
          - AttributeName: tablename
            AttributeType: S
        KeySchema:
          - AttributeName: tablename
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ECSSchedule:
      Type: AWS::Events::Rule
      Properties:
        State: ENABLED
        ScheduleExpression: "cron(0 * * * ? *)"
        Targets:
          - Arn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/trends-collector-crawler
            Id: trends-collector-crawler-schedule
            RoleArn: !GetAtt EventsRole.Arn
            EcsParameters:
              TaskDefinitionArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/trends-crawler
              TaskCount: 1
              LaunchType: FARGATE
              NetworkConfiguration:
                AwsVpcConfiguration:
                  AssignPublicIp: ENABLED
                  SecurityGroups:
                    - sg-01a16964484f08add
                  Subnets:
                    - subnet-018ec35c226077950

    DailyTrendsSchedule:
      Type: AWS::Events::Rule
      Properties:
        State: ENABLED
        ScheduleExpression: "cron(0 9 * * ? *)"
        Targets:
          - Arn:
              Fn::GetAtt: [DailyTrendsStateMachine, Arn]
            Id: trends-collector-crawler-schedule
            RoleArn: !GetAtt EventsRole.Arn

    EventsRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "events.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "events-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "ecs:RunTask"
                  Resource: "*"
                - Effect: "Allow"
                  Action: "iam:PassRole"
                  Resource:
                    - !Sub "arn:aws:iam::${AWS::AccountId}:role/trends-collector-iam-role-for-ecs-task-execute-6553882"
                    - !Sub "arn:aws:iam::${AWS::AccountId}:role/trends-collector-iam-role-for-ecs-task-5ec0e0b"
                - Effect: "Allow"
                  Action: "states:StartExecution"
                  Resource:
                    Fn::GetAtt: [DailyTrendsStateMachine, Arn]
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
