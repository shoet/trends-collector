# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: trends-collector
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: go1.x

  stage: dev
  region: ap-northeast-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: "*"

package:
  patterns:
    - "!./**"
    - ./bin/**

functions:
  health:
    handler: bin/health
    events:
      - http:
          path: /health
          method: get
          cors: true
          # private: true

  topic:
    handler: bin/topic
    events:
      - http:
          path: /topic
          method: get
          cors: true
          # private: true
      - http:
          path: /topic/{id}
          method: get
          cors: true
          # private: true
      - http:
          path: /topic
          method: post
          cors: true
          # private: true
      - http:
          path: /topic
          method: delete
          cors: true
          # private: true
      - http:
          path: /topic
          method: put
          cors: true
          # private: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    topicsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: topics
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    pagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pages
        AttributeDefinitions:
          - AttributeName: partition_key
            AttributeType: S
          - AttributeName: trend_rank
            AttributeType: N
        KeySchema:
          - AttributeName: partition_key
            KeyType: HASH
          - AttributeName: trend_rank
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    sequenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sequence
        AttributeDefinitions:
          - AttributeName: tablename
            AttributeType: S
        KeySchema:
          - AttributeName: tablename
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ECSSchedule:
      Type: AWS::Events::Rule
      Properties:
        State: ENABLED
        ScheduleExpression: "cron(0 * * * ? *)"
        Targets:
          - Arn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/trends-collector-crawler
            Id: trends-collector-crawler-schedule
            RoleArn: !GetAtt EventsRole.Arn
            EcsParameters:
              TaskDefinitionArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/crawler
              TaskCount: 1
              LaunchType: FARGATE
              NetworkConfiguration:
                AwsVpcConfiguration:
                  AssignPublicIp: ENABLED
                  SecurityGroups:
                    - sg-01a16964484f08add
                  Subnets:
                    - subnet-018ec35c226077950

    EventsRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "events.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "ecs-events-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "ecs:RunTask"
                  Resource: "*"
                - Effect: "Allow"
                  Action: "iam:PassRole"
                  Resource:
                    - !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
                    - !Sub "arn:aws:iam::${AWS::AccountId}:role/trends-collector-iam-role-for-ecs-task-5ec0e0b"
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
